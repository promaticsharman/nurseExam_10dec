import { AfterViewInit, ElementRef, NgZone, OnDestroy, InjectionToken } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
import { Events } from './Events';
import * as ɵngcc0 from '@angular/core';
export declare const TINYMCE_SCRIPT_SRC: InjectionToken<string>;
export declare class EditorComponent extends Events implements AfterViewInit, ControlValueAccessor, OnDestroy {
    private platformId;
    private tinymceScriptSrc?;
    set disabled(val: boolean);
    get disabled(): boolean;
    get editor(): any;
    ngZone: NgZone;
    cloudChannel: string;
    apiKey: string;
    init: Record<string, any> | undefined;
    id: string;
    initialValue: string | undefined;
    outputFormat: 'html' | 'text' | undefined;
    inline: boolean | undefined;
    tagName: string | undefined;
    plugins: string | undefined;
    toolbar: string | string[] | undefined;
    modelEvents: string;
    allowedEvents: string | string[] | undefined;
    ignoreEvents: string | string[] | undefined;
    private _elementRef;
    private _element;
    private _disabled;
    private _editor;
    private onTouchedCallback;
    private onChangeCallback;
    constructor(elementRef: ElementRef, ngZone: NgZone, platformId: Object, tinymceScriptSrc?: string);
    writeValue(value: string | null): void;
    registerOnChange(fn: (_: any) => void): void;
    registerOnTouched(fn: any): void;
    setDisabledState(isDisabled: boolean): void;
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    createElement(): void;
    initialise(): void;
    private getScriptSrc;
    private initEditor;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<EditorComponent>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<EditorComponent, "editor", never, {
    "disabled": "disabled";
    "initialValue": "initialValue";
    "init": "init";
    "id": "id";
    "inline": "inline";
    "cloudChannel": "cloudChannel";
    "apiKey": "apiKey";
    "outputFormat": "outputFormat";
    "tagName": "tagName";
    "plugins": "plugins";
    "toolbar": "toolbar";
    "modelEvents": "modelEvents";
    "allowedEvents": "allowedEvents";
    "ignoreEvents": "ignoreEvents";
}, {}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZWRpdG9yLmNvbXBvbmVudC5kLnRzIiwic291cmNlcyI6WyJlZGl0b3IuY29tcG9uZW50LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7QUFHQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQXNDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFmdGVyVmlld0luaXQsIEVsZW1lbnRSZWYsIE5nWm9uZSwgT25EZXN0cm95LCBJbmplY3Rpb25Ub2tlbiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ29udHJvbFZhbHVlQWNjZXNzb3IgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5pbXBvcnQgeyBFdmVudHMgfSBmcm9tICcuL0V2ZW50cyc7XG5leHBvcnQgZGVjbGFyZSBjb25zdCBUSU5ZTUNFX1NDUklQVF9TUkM6IEluamVjdGlvblRva2VuPHN0cmluZz47XG5leHBvcnQgZGVjbGFyZSBjbGFzcyBFZGl0b3JDb21wb25lbnQgZXh0ZW5kcyBFdmVudHMgaW1wbGVtZW50cyBBZnRlclZpZXdJbml0LCBDb250cm9sVmFsdWVBY2Nlc3NvciwgT25EZXN0cm95IHtcbiAgICBwcml2YXRlIHBsYXRmb3JtSWQ7XG4gICAgcHJpdmF0ZSB0aW55bWNlU2NyaXB0U3JjPztcbiAgICBzZXQgZGlzYWJsZWQodmFsOiBib29sZWFuKTtcbiAgICBnZXQgZGlzYWJsZWQoKTogYm9vbGVhbjtcbiAgICBnZXQgZWRpdG9yKCk6IGFueTtcbiAgICBuZ1pvbmU6IE5nWm9uZTtcbiAgICBjbG91ZENoYW5uZWw6IHN0cmluZztcbiAgICBhcGlLZXk6IHN0cmluZztcbiAgICBpbml0OiBSZWNvcmQ8c3RyaW5nLCBhbnk+IHwgdW5kZWZpbmVkO1xuICAgIGlkOiBzdHJpbmc7XG4gICAgaW5pdGlhbFZhbHVlOiBzdHJpbmcgfCB1bmRlZmluZWQ7XG4gICAgb3V0cHV0Rm9ybWF0OiAnaHRtbCcgfCAndGV4dCcgfCB1bmRlZmluZWQ7XG4gICAgaW5saW5lOiBib29sZWFuIHwgdW5kZWZpbmVkO1xuICAgIHRhZ05hbWU6IHN0cmluZyB8IHVuZGVmaW5lZDtcbiAgICBwbHVnaW5zOiBzdHJpbmcgfCB1bmRlZmluZWQ7XG4gICAgdG9vbGJhcjogc3RyaW5nIHwgc3RyaW5nW10gfCB1bmRlZmluZWQ7XG4gICAgbW9kZWxFdmVudHM6IHN0cmluZztcbiAgICBhbGxvd2VkRXZlbnRzOiBzdHJpbmcgfCBzdHJpbmdbXSB8IHVuZGVmaW5lZDtcbiAgICBpZ25vcmVFdmVudHM6IHN0cmluZyB8IHN0cmluZ1tdIHwgdW5kZWZpbmVkO1xuICAgIHByaXZhdGUgX2VsZW1lbnRSZWY7XG4gICAgcHJpdmF0ZSBfZWxlbWVudDtcbiAgICBwcml2YXRlIF9kaXNhYmxlZDtcbiAgICBwcml2YXRlIF9lZGl0b3I7XG4gICAgcHJpdmF0ZSBvblRvdWNoZWRDYWxsYmFjaztcbiAgICBwcml2YXRlIG9uQ2hhbmdlQ2FsbGJhY2s7XG4gICAgY29uc3RydWN0b3IoZWxlbWVudFJlZjogRWxlbWVudFJlZiwgbmdab25lOiBOZ1pvbmUsIHBsYXRmb3JtSWQ6IE9iamVjdCwgdGlueW1jZVNjcmlwdFNyYz86IHN0cmluZyk7XG4gICAgd3JpdGVWYWx1ZSh2YWx1ZTogc3RyaW5nIHwgbnVsbCk6IHZvaWQ7XG4gICAgcmVnaXN0ZXJPbkNoYW5nZShmbjogKF86IGFueSkgPT4gdm9pZCk6IHZvaWQ7XG4gICAgcmVnaXN0ZXJPblRvdWNoZWQoZm46IGFueSk6IHZvaWQ7XG4gICAgc2V0RGlzYWJsZWRTdGF0ZShpc0Rpc2FibGVkOiBib29sZWFuKTogdm9pZDtcbiAgICBuZ0FmdGVyVmlld0luaXQoKTogdm9pZDtcbiAgICBuZ09uRGVzdHJveSgpOiB2b2lkO1xuICAgIGNyZWF0ZUVsZW1lbnQoKTogdm9pZDtcbiAgICBpbml0aWFsaXNlKCk6IHZvaWQ7XG4gICAgcHJpdmF0ZSBnZXRTY3JpcHRTcmM7XG4gICAgcHJpdmF0ZSBpbml0RWRpdG9yO1xufVxuIl19